Python: The Complete Professional Guide
=======================================

Table of Contents
-----------------
1. Introduction to Python
2. Why Use Python?
3. Python Installation and Setup
4. Python Syntax and Structure
5. Variables and Data Types
6. Operators in Python
7. Control Flow (if, else, elif)
8. Loops (for, while)
9. Functions and Lambda Expressions
10. Modules and Packages
11. Input and Output
12. Exception Handling
13. File Handling
14. Object-Oriented Programming (OOP)
15. Python Standard Library
16. Virtual Environments and pip
17. Working with External Libraries
18. Data Structures (List, Tuple, Set, Dict)
19. Comprehensions
20. Generators and Iterators
21. Decorators
22. Context Managers
23. Regular Expressions
24. Working with Dates and Times
25. Web Scraping
26. Working with APIs
27. Data Analysis (NumPy, pandas)
28. Data Visualization (matplotlib, seaborn)
29. Introduction to Machine Learning
30. Testing and Debugging
31. Logging
32. Multithreading and Multiprocessing
33. Networking
34. Working with Databases (SQLite, MySQL)
35. GUI Programming (tkinter)
36. Packaging and Distribution
37. Best Practices and Coding Standards
38. Useful Tools and Resources
39. Sample Projects
40. Conclusion

------------------------------------------------------------
1. Introduction to Python
------------------------------------------------------------
Python is a high-level, interpreted programming language known for its simplicity and readability. It is widely used in web development, data science, automation, artificial intelligence, and more.

------------------------------------------------------------
2. Why Use Python?
------------------------------------------------------------
- Easy to learn and use
- Large community and extensive libraries
- Versatile: web, data, automation, AI, scripting
- Cross-platform compatibility

------------------------------------------------------------
3. Python Installation and Setup
------------------------------------------------------------
- Download from https://python.org
- Install using the installer for your OS
- Verify installation: `python --version`
- Use IDEs like VS Code, PyCharm, or Jupyter Notebook

------------------------------------------------------------
4. Python Syntax and Structure
------------------------------------------------------------
- Indentation is crucial (no curly braces)
- Case-sensitive
- Comments: `# single line`, `''' multi-line '''`

Example:
    # This is a comment
    print("Hello, World!")

------------------------------------------------------------
5. Variables and Data Types
------------------------------------------------------------
Variables store data. Python is dynamically typed.

Common data types:
- int, float, str, bool
- list, tuple, set, dict

Example:
    x = 10
    name = "Alice"
    pi = 3.14
    is_valid = True

------------------------------------------------------------
6. Operators in Python
------------------------------------------------------------
- Arithmetic: +, -, *, /, //, %, **
- Comparison: ==, !=, >, <, >=, <=
- Logical: and, or, not
- Assignment: =, +=, -=, etc.

------------------------------------------------------------
7. Control Flow (if, else, elif)
------------------------------------------------------------
Example:
    if x > 0:
        print("Positive")
    elif x == 0:
        print("Zero")
    else:
        print("Negative")

------------------------------------------------------------
8. Loops (for, while)
------------------------------------------------------------
For loop:
    for i in range(5):
        print(i)

While loop:
    count = 0
    while count < 5:
        print(count)
        count += 1

------------------------------------------------------------
9. Functions and Lambda Expressions
------------------------------------------------------------
Functions group reusable code.

Example:
    def greet(name):
        return f"Hello, {name}!"

    print(greet("Bob"))

Lambda (anonymous) functions:
    square = lambda x: x * x
    print(square(5))

------------------------------------------------------------
10. Modules and Packages
------------------------------------------------------------
- Module: a .py file with code
- Package: a directory with __init__.py

Importing:
    import math
    from datetime import datetime

------------------------------------------------------------
11. Input and Output
------------------------------------------------------------
Input:
    name = input("Enter your name: ")

Output:
    print("Hello,", name)

------------------------------------------------------------
12. Exception Handling
------------------------------------------------------------
Try-except blocks handle errors.

Example:
    try:
        result = 10 / 0
    except ZeroDivisionError:
        print("Cannot divide by zero.")

------------------------------------------------------------
13. File Handling
------------------------------------------------------------
Reading a file:
    with open('file.txt', 'r') as f:
        content = f.read()

Writing to a file:
    with open('file.txt', 'w') as f:
        f.write("Hello, file!")

------------------------------------------------------------
14. Object-Oriented Programming (OOP)
------------------------------------------------------------
Classes and objects model real-world entities.

Example:
    class Dog:
        def __init__(self, name):
            self.name = name

        def bark(self):
            print(f"{self.name} says woof!")

    d = Dog("Buddy")
    d.bark()

------------------------------------------------------------
15. Python Standard Library
------------------------------------------------------------
Python comes with many built-in modules:
- os, sys, math, datetime, random, json, re, etc.

------------------------------------------------------------
16. Virtual Environments and pip
------------------------------------------------------------
- Use `venv` to create isolated environments
- Install packages: `pip install package_name`

------------------------------------------------------------
17. Working with External Libraries
------------------------------------------------------------
Example:
    import requests
    response = requests.get("https://api.github.com")
    print(response.json())

------------------------------------------------------------
18. Data Structures (List, Tuple, Set, Dict)
------------------------------------------------------------
List:
    nums = [1, 2, 3]

Tuple:
    point = (10, 20)

Set:
    unique = {1, 2, 3}

Dict:
    person = {"name": "Alice", "age": 30}

------------------------------------------------------------
19. Comprehensions
------------------------------------------------------------
List comprehension:
    squares = [x*x for x in range(10)]

Dict comprehension:
    squares = {x: x*x for x in range(5)}

------------------------------------------------------------
20. Generators and Iterators
------------------------------------------------------------
Generator:
    def count_up(n):
        for i in range(n):
            yield i

    for num in count_up(5):
        print(num)

------------------------------------------------------------
21. Decorators
------------------------------------------------------------
Decorators modify functions.

Example:
    def my_decorator(func):
        def wrapper():
            print("Before")
            func()
            print("After")
        return wrapper

    @my_decorator
    def say_hi():
        print("Hi!")

    say_hi()

------------------------------------------------------------
22. Context Managers
------------------------------------------------------------
Used for resource management.

Example:
    with open('file.txt', 'r') as f:
        data = f.read()

------------------------------------------------------------
23. Regular Expressions
------------------------------------------------------------
Pattern matching with `re` module.

Example:
    import re
    match = re.search(r"\d+", "abc123")
    print(match.group())

------------------------------------------------------------
24. Working with Dates and Times
------------------------------------------------------------
    from datetime import datetime
    now = datetime.now()
    print(now.strftime("%Y-%m-%d %H:%M:%S"))

------------------------------------------------------------
25. Web Scraping
------------------------------------------------------------
    import requests
    from bs4 import BeautifulSoup

    url = "https://example.com"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, "html.parser")
    print(soup.title.text)

------------------------------------------------------------
26. Working with APIs
------------------------------------------------------------
    import requests
    url = "https://api.github.com"
    response = requests.get(url)
    print(response.json())

------------------------------------------------------------
27. Data Analysis (NumPy, pandas)
------------------------------------------------------------
    import numpy as np
    arr = np.array([1, 2, 3])

    import pandas as pd
    df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})

------------------------------------------------------------
28. Data Visualization (matplotlib, seaborn)
------------------------------------------------------------
    import matplotlib.pyplot as plt
    plt.plot([1, 2, 3], [4, 5, 6])
    plt.show()

    import seaborn as sns
    sns.barplot(x=[1,2,3], y=[4,5,6])

------------------------------------------------------------
29. Introduction to Machine Learning
------------------------------------------------------------
    from sklearn.linear_model import LinearRegression
    model = LinearRegression()
    # Fit and predict...

------------------------------------------------------------
30. Testing and Debugging
------------------------------------------------------------
    def add(a, b):
        return a + b

    assert add(2, 3) == 5

    # Use pdb for debugging
    # import pdb; pdb.set_trace()

------------------------------------------------------------
31. Logging
------------------------------------------------------------
    import logging
    logging.basicConfig(level=logging.INFO)
    logging.info("This is an info message.")

------------------------------------------------------------
32. Multithreading and Multiprocessing
------------------------------------------------------------
    import threading
    def worker():
        print("Thread is running")
    t = threading.Thread(target=worker)
    t.start()

    import multiprocessing
    def worker():
        print("Process is running")
    p = multiprocessing.Process(target=worker)
    p.start()

------------------------------------------------------------
33. Networking
------------------------------------------------------------
    import socket
    s = socket.socket()
    s.connect(("example.com", 80))

------------------------------------------------------------
34. Working with Databases (SQLite, MySQL)
------------------------------------------------------------
    import sqlite3
    conn = sqlite3.connect('test.db')
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER, name TEXT)')
    conn.commit()

------------------------------------------------------------
35. GUI Programming (tkinter)
------------------------------------------------------------
    import tkinter as tk
    root = tk.Tk()
    tk.Label(root, text="Hello, GUI!").pack()
    root.mainloop()

------------------------------------------------------------
36. Packaging and Distribution
------------------------------------------------------------
- Use `setuptools` for packaging
- Create `setup.py`
- Distribute via PyPI

------------------------------------------------------------
37. Best Practices and Coding Standards
------------------------------------------------------------
- Follow PEP 8
- Use meaningful variable names
- Write docstrings and comments
- Keep code DRY (Don't Repeat Yourself)

------------------------------------------------------------
38. Useful Tools and Resources
------------------------------------------------------------
- Official docs: https://docs.python.org/
- PyPI: https://pypi.org/
- Stack Overflow, Real Python, GeeksforGeeks

------------------------------------------------------------
39. Sample Projects
------------------------------------------------------------
- Calculator
- Web scraper
- To-do app
- Data visualizer
- Chatbot

------------------------------------------------------------
40. Conclusion
------------------------------------------------------------
Python is a powerful, versatile language for beginners and professionals alike. Practice regularly, explore libraries, and build projects to master Python.

------------------------------------------------------------

# End of Book
